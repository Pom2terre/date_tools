name: Deploy Flask to Azure using Azure CLI

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Installer GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗜️ Create clean deployment package
        run: |
          mkdir deploy_folder
          shopt -s extglob
          cp -r !(deploy_folder|.git|.github|venv|__pycache__|deploy.zip) deploy_folder/
          cd deploy_folder
          zip -r ../deploy.zip .
          cd ..

      - name: 🏷️ Générer un tag Git auto + release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE_TAG=$(date +'%Y.%m.%d.%H%M')
          TAG="v$DATE_TAG"

          echo "Création du tag $TAG"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$TAG" -m "Déploiement automatique du $DATE_TAG"
          git push origin "$TAG"

          echo "Création de la release GitHub"
          gh auth setup-git
          gh release create "$TAG" --title "Déploiement $TAG" --notes "Déploiement automatique réalisé via GitHub Actions le $DATE_TAG" || echo "Release déjà existante"

      - name: 🔐 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App via CLI
        run: |
          az webapp deploy \
            --resource-group RESGrp_Linux \
            --name my-python-app123 \
            --src-path deploy.zip \
            --type zip

      - name: 🆙 Définir APP_VERSION depuis le tag ou fallback
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          if [ -z "$TAG" ]; then
            TIMESTAMP=$(date +'%Y.%m.%d.%H%M')
            GIT_HASH=$(git rev-parse --short HEAD)
            TAG="${TIMESTAMP}-${GIT_HASH}"
          fi

          echo "Version à utiliser : $TAG"
          az webapp config appsettings set \
            --name my-python-app123 \
            --resource-group RESGrp_Linux \
            --settings APP_VERSION=$TAG

      - name: ✅ Test application endpoints (visuel + résumé + artefact)
        run: |
          echo "⏳ Attente démarrage app..."
          sleep 15

          BASE_URL="https://my-python-app123.azurewebsites.net"

          PASSED=true
          SUMMARY="### 🔎 Résumé des tests de disponibilité\n"

          test_endpoint () {
            local path=$1
            local expect=$2
            local label=$3

            echo "🔹 Test $label"
            if [ "$expect" == "content" ]; then
              if curl -fsSL "$BASE_URL$path" | grep -q "$label"; then
                echo "✅ $label OK"
                SUMMARY+="✅ \`$path\` contient '$label'\n"
              else
                echo "❌ $label Échec (contenu manquant)"
                SUMMARY+="❌ \`$path\` ne contient pas '$label'\n"
                PASSED=false
              fi
            else
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL$path")
              if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 400 ]; then
                echo "✅ $label ($STATUS)"
                SUMMARY+="✅ \`$path\` a répondu $STATUS\n"
              else
                echo "❌ $label ($STATUS)"
                SUMMARY+="❌ \`$path\` a échoué avec $STATUS\n"
                PASSED=false
              fi
            fi
          }

          test_endpoint "/hello" "content" "Flask is running"
          test_endpoint "/" "status" "Page d’accueil"
          test_endpoint "/calculate-duration" "status" "Calcul durée"
          test_endpoint "/day-of-week" "status" "Jour de la semaine"

          echo -e "$SUMMARY" > test-summary.md
          cat test-summary.md

          if [ "$PASSED" = false ]; then
            echo "❌ Des tests ont échoué."
            exit 1
          else
            echo "✅ Tous les tests sont passés avec succès."
          fi

      - name: 📤 Publier le résumé des tests
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
