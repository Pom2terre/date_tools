name: Build and Deploy Flask to Azure

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.NEW_VERSION }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîÑ Fetch full history and tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --prune --tags

      - name: üÜô Determine next version
        id: version
        shell: bash
        run: |
          set -e
          git tag --sort=-v:refname
          LATEST=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "v0.0.0")
          echo "Dernier tag : $LATEST"
          if [[ "$LATEST" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
          else
            NEW_VERSION="v0.0.1"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: üè∑Ô∏è Tag HEAD with NEW_VERSION
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -f ${{ steps.version.outputs.NEW_VERSION }}
          git push -f origin ${{ steps.version.outputs.NEW_VERSION }}

      - name: üóúÔ∏è Create deployment package
        shell: bash
        run: |
          set -e
          mkdir deploy_folder
          shopt -s extglob
          INCLUDED=$(ls -A | grep -Ev '^(venv|.env|.git|.gitignore|__pycache__|deploy.zip|deploy_folder|.DS_Store)$')
          for item in $INCLUDED; do
            cp -r "$item" deploy_folder/
          done
          cd deploy_folder
          zip -r ../deploy.zip .
          cd ..

      - name: üîç Inspect deploy.zip content
        run: unzip -l deploy.zip

      - name: üì§ Upload deploy.zip
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: deploy.zip

  deploy-to-azure:
    runs-on: ubuntu-latest
    needs: build-and-package

    steps:
      - name: üì• Download deploy.zip
        uses: actions/download-artifact@v4
        with:
          name: deploy-package
          path: .

      - name: üîê Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîÑ Set APP_VERSION in Azure
        run: |
          az webapp config appsettings set \
            --name date-calc \
            --resource-group RESGrp_Linux \
            --settings APP_VERSION=${{ needs.build-and-package.outputs.new_version }}

      - name: üöÄ Deploy to Azure Web App
        run: |
          az webapp deploy \
            --name date-calc \
            --resource-group RESGrp_Linux \
            --src-path deploy.zip \
            --type zip

      - name: ‚úÖ Tester les endpoints (ne bloque pas le workflow)
        shell: bash
        continue-on-error: true
        run: |
          set +e  # D√©sactive l'arr√™t sur erreur
          BASE="https://date-calc.azurewebsites.net"
          sleep 15
          echo "### R√©sum√© des tests" > test-summary.md
          EXIT_CODE=0

          test_url() {
            PATH=$1
            EXPECTED=${2:-200}
            echo "üîπ Test de $PATH" >> test-summary.md
            if command -v curl &> /dev/null; then
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE$PATH")
            elif command -v wget &> /dev/null; then
              STATUS=$(wget --server-response --spider "$BASE$PATH" 2>&1 | awk '/HTTP\// {print $2}' | head -n1)
            else
              echo "‚ùå Ni curl ni wget disponibles." >> test-summary.md
              EXIT_CODE=1
              return
            fi

            if [ "$STATUS" -eq "$EXPECTED" ]; then
              echo "‚úÖ $PATH OK ($STATUS)" >> test-summary.md
            else
              echo "‚ùå $PATH √âCHEC ($STATUS au lieu de $EXPECTED)" >> test-summary.md
              EXIT_CODE=1
            fi
          }

          test_url "/"
          test_url "/hello"
          test_url "/day-of-week"
          test_url "/calculate-duration"

          cat test-summary.md

          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "‚ùó Un ou plusieurs tests HTTP ont √©chou√©, mais le workflow continue."
          else
            echo "‚úÖ Tous les tests HTTP ont r√©ussi."
          fi

